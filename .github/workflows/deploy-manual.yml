name: Manual Deploy NodeBB
run-name: "Deploying ${{ github.event.repository.name }} changes to ${{ inputs.environment }}"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - development
          - stage
          - prod
        default: 'development'

env:
  AWS_REGION: eu-west-2

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      ecr_repository: ${{ steps.config.outputs.ecr_repository }}
      ecs_cluster: ${{ steps.config.outputs.ecs_cluster }}
      ecs_service: ${{ steps.config.outputs.ecs_service }}
      aws_credentials: ${{ steps.config.outputs.aws_credentials }}
    steps:
      - name: Checkout selected ref (with tags)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Validate ref type for production
        run: |
          ENVIRONMENT="${{ inputs.environment }}"
          REF_NAME="${{ github.ref_name }}"
          REF_TYPE="${{ github.ref_type }}"
          
          echo "📍 Environment: $ENVIRONMENT"
          echo "📍 Selected Ref: $REF_NAME ($REF_TYPE)"

          # Ensure tags are present for checks
          git fetch --tags

          # Check if ref is a tag
          if [ "$REF_TYPE" = "tag" ]; then
            IS_TAG=true
            echo "✅ Ref Type: TAG"
          else
            IS_TAG=false
            echo "✅ Ref Type: BRANCH/COMMIT"
          fi
          
          # Validation for production environment
          if [ "$ENVIRONMENT" = "main" ]; then
            if [ "$IS_TAG" = "false" ]; then
              echo ""
              echo "❌ ERROR: Cannot deploy to PRODUCTION from a branch!"
              echo ""
              echo "⚠️  Production environment requires TAG-based deployments only."
              echo ""
              echo "📋 Available tags (recent 10):"
              git tag -l | sort -V | tail -10
              echo ""
              echo "💡 Please trigger the workflow from a TAG in the 'Use workflow from' selector."
              exit 1
            fi
            # Ensure the tag commit is on main
            git fetch origin main --depth=0
            TAG_SHA=$(git rev-parse "refs/tags/$REF_NAME^{commit}")
            if git merge-base --is-ancestor "$TAG_SHA" origin/main; then
              echo "✅ Tag commit is on main"
            else
              echo "❌ ERROR: Tag '$REF_NAME' is not based on 'main'. Create release tags from main only."
              exit 1
            fi
            echo "✅ Validation PASSED: Deploying TAG to Production"
          else
            echo "✅ Validation PASSED: $ENVIRONMENT allows branches and tags"
          fi

      - name: Validate deployment configuration
        run: |
          echo "🔍 Validating deployment configuration..."
          
          # Check if configuration file exists
          if [ ! -f "deployment-config.json" ]; then
            echo "❌ Error: deployment-config.json not found"
            exit 1
          fi
          
          # Validate JSON syntax
          if ! jq empty deployment-config.json 2>/dev/null; then
            echo "❌ Error: Invalid JSON syntax in deployment-config.json"
            exit 1
          fi
          
          ENVIRONMENT="${{ inputs.environment }}"
          CONFIG=$(jq -r ".$ENVIRONMENT" deployment-config.json)
          
          if [ "$CONFIG" = "null" ]; then
            echo "❌ Error: No configuration found for environment '$ENVIRONMENT'"
            echo "Available environments: $(jq -r 'keys | join(", ")' deployment-config.json)"
            exit 1
          fi
          
          echo "✅ Configuration for environment '$ENVIRONMENT' is valid"

      - name: Load environment configuration
        id: config
        run: |
          ENVIRONMENT="${{ inputs.environment }}"
          CONFIG=$(jq -r ".$ENVIRONMENT" deployment-config.json)
          
          # Set environment variables from config
          echo "$CONFIG" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' >> $GITHUB_OUTPUT
          
          # Log configuration for debugging
          echo "Deploying to environment: $(echo "$CONFIG" | jq -r '.environment')"
          echo "ECR Repository: $(echo "$CONFIG" | jq -r '.ecr_repository')"
          echo "ECS Cluster: $(echo "$CONFIG" | jq -r '.ecs_cluster')"
          echo "ECS Service: $(echo "$CONFIG" | jq -r '.ecs_service')"
          echo "AWS Credentials: $(echo "$CONFIG" | jq -r '.aws_credentials')"

  test:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout selected ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci || npm install

      - name: Run tests (non-blocking)
        run: |
          if [ -f package.json ] && jq -e '.scripts.test' package.json >/dev/null 2>&1; then
            npm test || echo "Tests failed but continuing..."
          else
            echo "No test script found, skipping tests"
          fi

      - name: Run linting (non-blocking)
        run: npm run lint || echo "Linting failed but continuing..."

  build:
    runs-on: ubuntu-latest
    needs: [validate, test]
    steps:
      - name: Checkout selected ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci || npm install

      - name: Build application (skip if not required)
        run: |
          if [ -f package.json ] && jq -e '.scripts.build' package.json >/dev/null 2>&1; then
            npm run build
          else
            echo "No build script found, proceeding"
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: [validate, build]
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout selected ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets[format('{0}_AWS_ACCESS_KEY_ID', needs.validate.outputs.aws_credentials)] }}
          aws-secret-access-key: ${{ secrets[format('{0}_AWS_SECRET_ACCESS_KEY', needs.validate.outputs.aws_credentials)] }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ needs.validate.outputs.ecr_repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image for ${{ needs.validate.outputs.environment }} environment"
          echo "ECR Repository: $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"
          echo "Git Ref: ${{ github.ref_name }}"
          
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Update ECS service
        env:
          ECS_CLUSTER: ${{ needs.validate.outputs.ecs_cluster }}
          ECS_SERVICE: ${{ needs.validate.outputs.ecs_service }}
        run: |
          echo "Updating ECS service for ${{ needs.validate.outputs.environment }} environment"
          echo "Cluster: $ECS_CLUSTER"
          echo "Service: $ECS_SERVICE"
          echo "Deployed from ref: ${{ github.ref_name }}"
          
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for deployment
        env:
          ECS_CLUSTER: ${{ needs.validate.outputs.ecs_cluster }}
          ECS_SERVICE: ${{ needs.validate.outputs.ecs_service }}
        run: |
          echo "Waiting for deployment to complete..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --region ${{ env.AWS_REGION }}
          echo "✅ Deployment completed successfully!"

      - name: Deployment summary
        run: |
          echo "## 🚀 NodeBB Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.validate.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Git Ref**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ECR Repository**: ${{ needs.validate.outputs.ecr_repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ECS Cluster**: ${{ needs.validate.outputs.ecs_cluster }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ECS Service**: ${{ needs.validate.outputs.ecs_service }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed At**: $(date)" >> $GITHUB_STEP_SUMMARY
